# TODO

* Refactor TUI code in ui.

## Coming Up.

* Handle Symlink and Hardlinks. User should be able to decide what to do. But we want
sensible defaults.

* Finish TUI so users can select whath they want to do with duplicates.
* Add The following options:
    1. --dry-run
    2. --delete-all
    3. --exclude
    4. --max-file-size
    5. --min-file-size
    6. --inc-dotfiles
    7. --throttle - Avoid resource hogging.
* File restore. To start we can simpply marshal JSON compressed file in order to restore.
with mininmal overhead.
* Handle permissions error. - Need to log to file

## Considerations

* Some duplicates are the result of a user having say two different versions of a program, or SDK. They
may need both. So perhapse we might detect this and ask the user if they want to keep both.
* Size capping. Maybe first read a small chunk of a file to determine if we need to
hash the file for real. Most of the time the first 100 bytes of files can deternie if they are dupes
* Defer hashing until two or more files have the same size.
* Decide what we will do if our memory map gets too large.
* Definitely need care handling user configs files.
* Consider using a config file for dskDitto itself.

## Long Term Goals

* Consider BLAKE2 for hash algorithm primary.
* Maybe include fuzzy file diffing. We can tell user if
files are similar but maybe not the same. This could be useful especially for images
and other media.

## Potentiall Issues:

(1) Memory usage. We need to be careful about how we handle memory.
(2) Consider IO usage.
(3) Handling of permissions gracefully.
